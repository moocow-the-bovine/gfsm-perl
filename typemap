# -*- Mode: Perl -*-

gfsmSemiring*	 O_OBJECT
gfsmAlphabet*	 O_OBJECT
gfsmAutomaton*   O_OBJECT
gfsmArcIter*     O_OBJECT

gfsmLabelVector* T_LABEL_VECTOR

gboolean         T_INT

guint            T_UINT
gfsmLabelId      T_UINT
gfsmLabelVal     T_UINT
gfsmStateId      T_UINT

gfsmSRType       T_UINT
gfsmWeight       T_FLOAT

gfsmArcSortMode  T_UINT
gfsmLabelSide    T_UINT

######################################################################
# perl->C
INPUT

#T_std_string
#  {
#    char *cstr = SvPV_nolen($arg);
#    $var.assign(cstr, SvCUR($arg));
#  }

T_INT
  {
      $var = SvIV($arg);
  }

T_UINT
  {
      $var = (unsigned int)SvIV($arg);
  }

T_FLOAT
  {
      $var = SvNV($arg);
  }

T_LABEL_VECTOR
  {
      int _i;
      AV *av=NULL;

      if (SvROK($arg) && (SvTYPE(SvRV($arg)) == SVt_PVAV) )
	  av = (AV*)SvRV( $arg );
      else {
	  warn( \"${Package}::$func_name() -- $var is not an AV reference\" );
	  XSRETURN_UNDEF;
      }

      $var = g_ptr_array_sized_new(av_len(av));
      for (_i=0; _i <= av_len(av); _i++) {
	  SV **sv = av_fetch(av,_i,0);
	  if (sv && *sv) {
	      g_ptr_array_add($var, (gpointer)(SvIV(*sv)));
	  } else {
	      g_ptr_array_add($var, ((gpointer)((int)gfsmNoLabel)));
	  }
      }
  }

######################################################################
# C->perl
OUTPUT

#T_std_string
#  $arg = newSVpvn($var.data(), $var.length());

T_INT
  {
      $arg = newSViv($var);
  }

T_UINT
  {
      $arg = newSViv((unsigned int)$var);
  }

T_FLOAT
  {
      $arg = newSVnv($var);
  }

T_LABEL_VECTOR
  {
      int _i;
      AV *av = newAV();
      if ($var) {
	  for (_i=0; _i < $var->len; _i++) {
	      av_push(av, newSViv((IV)g_ptr_array_index($var,_i)));
	  }
      }
      $arg = newRV((SV*)av);
  }
